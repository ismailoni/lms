generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  courseId       String             @id @default(uuid())
  teacherId      String
  teacherName    String
  teacherImage   String?
  title          String
  description    String?
  category       String
  image          String?
  price          Float              @default(0)
  level          String              @default("Beginner")
  status         String              @default("Draft")
  sections       Section[]
  enrollments    String[]           @default([])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relationships
  transactions       Transaction[]
  userCourseProgress UserCourseProgress[]
  teacherEarnings    TeacherEarnings[]

  @@map("courses")
}

model Transaction {
  transactionId   String            @id @default(uuid())
  userId          String
  courseId        String
  paymentProvider PaymentProvider
  amount          Float
  dateTime        DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  course Course @relation(fields: [courseId], references: [courseId])

  @@unique([userId, courseId])
  @@map("transactions")
}

model TeacherEarnings {
  id          String   @id @default(uuid())
  teacherId   String
  courseId    String
  title       String?
  enrollCount Int      @default(0)
  earnings    Float    @default(0)
  updatedAt   DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [courseId])

  @@unique([teacherId, courseId])
  @@map("teacher_earnings")
}

model UserCourseProgress {
  id                    String   @id @default(uuid())
  userId                String
  courseId              String
  enrollmentDate        String
  overallProgress       Float
  lastAccessedTimestamp String
  progressData          Json?    // Add this field back
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [courseId])

  @@unique([userId, courseId])
  @@map("user_course_progress")
}

model Section {
  sectionId          String    @id @default(uuid())
  courseId           String
  sectionTitle       String
  sectionDescription String?
  chapters           Chapter[]
  course             Course    @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("sections")
}

model Chapter {
  chapterId String  @id @default(uuid())
  sectionId String
  title     String
  content   String?
  type      String  @default("Text")
  video     String?
  section   Section @relation(fields: [sectionId], references: [sectionId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chapters")
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
}

enum PaymentProvider {
  stripe
}
